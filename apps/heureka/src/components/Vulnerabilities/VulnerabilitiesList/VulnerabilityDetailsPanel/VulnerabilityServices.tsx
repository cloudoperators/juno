/*
 * SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and Juno contributors
 * SPDX-License-Identifier: Apache-2.0
 */

import React, { use, Suspense } from "react"
import { useNavigate } from "@tanstack/react-router"
import { Stack, Spinner } from "@cloudoperators/juno-ui-components"
import { Vulnerability } from "../../utils"
import { ApolloQueryResult } from "@apollo/client"
import { GetVulnerabilitiesQuery } from "../../../../generated/graphql"
import { getNormalizedVulnerabilitiesResponse } from "../../utils"

type VulnerabilityServicesProps = {
  vulnerabilityName: string
  vulnerabilitiesPromise: Promise<ApolloQueryResult<GetVulnerabilitiesQuery>>
  onServiceClick?: (serviceCcrn: string) => void
}

export const VulnerabilityServices = ({
  vulnerabilityName,
  vulnerabilitiesPromise,
  onServiceClick,
}: VulnerabilityServicesProps) => {
  const navigate = useNavigate()

  const handleServiceClick = (serviceCcrn: string) => {
    if (onServiceClick) {
      onServiceClick(serviceCcrn)
    } else {
      navigate({
        to: "/services/$service",
        params: { service: serviceCcrn },
      })
    }
  }

  // Use the promise passed from the parent
  const { data } = use(vulnerabilitiesPromise)

  // Get vulnerability data from the response
  const { vulnerabilities } = getNormalizedVulnerabilitiesResponse(data)
  const vulnerabilityData = vulnerabilities.find((vuln: Vulnerability) => vuln.name === vulnerabilityName)

  if (!vulnerabilityData) {
    return <div className="text-sm text-theme-light">Vulnerability not found: {vulnerabilityName}</div>
  }

  const services = vulnerabilityData.services || []

  if (services.length === 0) {
    return <div className="text-sm text-theme-light">No services affected by this vulnerability.</div>
  }

  return (
    <div className="mb-4">
      <Suspense
        fallback={
          <Stack gap="2" alignment="center">
            <div>Loading</div>
            <Spinner variant="primary"></Spinner>
          </Stack>
        }
      >
        <Stack gap="4" direction="horizontal" wrap>
          {services.map((service, index) => (
            <a
              key={index}
              href="#"
              onClick={(e) => {
                e.preventDefault()
                handleServiceClick(service.ccrn)
              }}
              className="link-hover"
            >
              {service.ccrn}
            </a>
          ))}
        </Stack>
      </Suspense>
    </div>
  )
}
