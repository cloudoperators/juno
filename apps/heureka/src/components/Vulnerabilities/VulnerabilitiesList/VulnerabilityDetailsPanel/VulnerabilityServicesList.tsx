/*
 * SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and Juno contributors
 * SPDX-License-Identifier: Apache-2.0
 */

import React, { use, Suspense } from "react"
import { useNavigate } from "@tanstack/react-router"
import {
  Stack,
  DataGrid,
  DataGridRow,
  DataGridHeadCell,
  DataGridCell,
  Spinner,
} from "@cloudoperators/juno-ui-components"
import { Vulnerability } from "../../utils"
import SectionContentHeading from "../../../common/SectionContentHeading"
import { CursorPagination } from "../../../common/CursorPagination"
import { ApolloQueryResult } from "@apollo/client"
import { GetVulnerabilitiesQuery } from "../../../../generated/graphql"
import { getNormalizedVulnerabilitiesResponse, getNormalizedVulnerabilityServicesResponse } from "../../utils"

type VulnerabilityServicesListProps = {
  vulnerabilityName: string
  vulnerabilitiesPromise: Promise<ApolloQueryResult<GetVulnerabilitiesQuery>>
  onServiceClick?: (serviceCcrn: string) => void
  goToPage: (after?: string | null) => void
}

const VulnerabilityServicesDataRows = ({
  vulnerabilitiesPromise,
  vulnerabilityName,
  onServiceClick,
}: {
  vulnerabilitiesPromise: Promise<ApolloQueryResult<GetVulnerabilitiesQuery>>
  vulnerabilityName: string
  onServiceClick?: (serviceCcrn: string) => void
}) => {
  const navigate = useNavigate()

  const handleServiceClick = (serviceCcrn: string) => {
    if (onServiceClick) {
      onServiceClick(serviceCcrn)
    } else {
      navigate({
        to: "/services/$service",
        params: { service: serviceCcrn },
      })
    }
  }

  // Use the promise passed from the parent
  const { data } = use(vulnerabilitiesPromise)

  // Get vulnerability data from the response
  const { vulnerabilities } = getNormalizedVulnerabilitiesResponse(data)
  const vulnerabilityData = vulnerabilities.find((vuln: Vulnerability) => vuln.name === vulnerabilityName)

  if (!vulnerabilityData) {
    return <div className="text-sm text-theme-light">Vulnerability not found: {vulnerabilityName}</div>
  }

  const services = vulnerabilityData.services || []
  const totalCount = vulnerabilityData.servicesCount || 0

  if (totalCount === 0) {
    return <div className="text-sm text-theme-light">No services affected by this vulnerability.</div>
  }

  return (
    <>
      {services.map((service, index) => (
        <DataGridRow key={index} className="cursor-pointer" onClick={() => handleServiceClick(service.ccrn)}>
          <DataGridCell className="whitespace-nowrap">{service.ccrn}</DataGridCell>
        </DataGridRow>
      ))}
    </>
  )
}

const VulnerabilityServicesTotalCount = ({
  vulnerabilitiesPromise,
  vulnerabilityName,
}: {
  vulnerabilitiesPromise: Promise<ApolloQueryResult<GetVulnerabilitiesQuery>>
  vulnerabilityName: string
}) => {
  const { data } = use(vulnerabilitiesPromise)
  const { vulnerabilities } = getNormalizedVulnerabilitiesResponse(data)
  const vulnerabilityData = vulnerabilities.find((vuln: Vulnerability) => vuln.name === vulnerabilityName)
  const totalCount = vulnerabilityData?.servicesCount || 0

  return <>{totalCount}</>
}

export const VulnerabilityServicesList = ({
  vulnerabilityName,
  vulnerabilitiesPromise,
  onServiceClick,
  goToPage,
}: VulnerabilityServicesListProps) => {
  return (
    <Suspense>
      <SectionContentHeading>
        Services
        <Suspense>
          (
          <VulnerabilityServicesTotalCount
            vulnerabilitiesPromise={vulnerabilitiesPromise}
            vulnerabilityName={vulnerabilityName}
          />
          )
        </Suspense>
      </SectionContentHeading>

      <div className="datagrid-hover">
        <DataGrid columns={1}>
          <DataGridRow>
            <DataGridHeadCell>Service CCRN</DataGridHeadCell>
          </DataGridRow>
          <Suspense
            fallback={
              <DataGridRow>
                <DataGridCell colSpan={1}>
                  <Stack gap="2" alignment="center">
                    <div>Loading</div>
                    <Spinner variant="primary"></Spinner>
                  </Stack>
                </DataGridCell>
              </DataGridRow>
            }
          >
            <VulnerabilityServicesDataRows
              vulnerabilitiesPromise={vulnerabilitiesPromise}
              vulnerabilityName={vulnerabilityName}
              onServiceClick={onServiceClick}
            />
          </Suspense>
        </DataGrid>
      </div>
      <Suspense>
        <CursorPagination
          dataNormalizationMethod={getNormalizedVulnerabilityServicesResponse}
          dataPromise={vulnerabilitiesPromise}
          goToPage={goToPage}
        />
      </Suspense>
    </Suspense>
  )
}
