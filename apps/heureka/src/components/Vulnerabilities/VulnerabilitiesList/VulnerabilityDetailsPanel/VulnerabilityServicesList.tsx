/*
 * SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and Juno contributors
 * SPDX-License-Identifier: Apache-2.0
 */

import React, { useState, useCallback, use, useEffect } from "react"
import { useNavigate, useRouteContext, useSearch } from "@tanstack/react-router"
import { 
  Stack, 
  DataGrid, 
  DataGridRow, 
  DataGridHeadCell, 
  DataGridCell,
  Spinner
} from "@cloudoperators/juno-ui-components"
import { Vulnerability } from "../../utils"
import SectionContentHeading from "../../../common/SectionContentHeading"
import { CursorPagination } from "../../../common/CursorPagination"
import { ApolloQueryResult } from "@apollo/client"
import { GetVulnerabilitiesQuery } from "../../../../generated/graphql"
import { fetchVulnerabilities } from "../../../../api/fetchVulnerabilities"
import { getNormalizedVulnerabilitiesResponse, getNormalizedVulnerabilityServicesResponse } from "../../utils"
import { VulnerabilityService } from "../../utils"

type VulnerabilityServicesListProps = {
  vulnerabilityName: string
  vulnerabilitiesPromise: Promise<ApolloQueryResult<GetVulnerabilitiesQuery>>
  onServiceClick?: (serviceCcrn: string) => void
  goToPage?: (after?: string | null) => void
}

export const VulnerabilityServicesList = ({ 
  vulnerabilityName, 
  vulnerabilitiesPromise,
  onServiceClick,
  goToPage
}: VulnerabilityServicesListProps) => {
  const navigate = useNavigate()

  const handleServiceClick = (serviceCcrn: string) => {
    if (onServiceClick) {
      onServiceClick(serviceCcrn)
    } else {
      navigate({
        to: "/services/$service",
        params: { service: serviceCcrn },
      })
    }
  }

  // Use the promise passed from the parent
  const { data } = use(vulnerabilitiesPromise)
  
  // Get vulnerability data from the response
  const { vulnerabilities } = getNormalizedVulnerabilitiesResponse(data)
  const vulnerabilityData = vulnerabilities.find((vuln: Vulnerability) => vuln.name === vulnerabilityName)
  
  if (!vulnerabilityData) {
    return (
      <div className="text-sm text-theme-light">
        Vulnerability not found: {vulnerabilityName}
      </div>
    )
  }
  
  const services = vulnerabilityData.services || []
  const totalCount = vulnerabilityData.servicesCount || 0

  if (totalCount === 0) {
    return (
      <div className="text-sm text-theme-light">
        No services affected by this vulnerability.
      </div>
    )
  }

  const handlePageChange = useCallback(
    (after?: string | null) => {
      if (goToPage) {
        goToPage(after)
      }
    },
    [goToPage]
  )

  return (
    <Stack gap="4" direction="vertical">
      <SectionContentHeading>
        Services ({totalCount})
      </SectionContentHeading>
      
      <div className="datagrid-hover">
        <DataGrid columns={1}>
          <DataGridRow>
            <DataGridHeadCell>Service CCRN</DataGridHeadCell>
          </DataGridRow>
          
          {services.map((service, index) => (
            <DataGridRow 
              key={index}
              className="cursor-pointer"
              onClick={() => handleServiceClick(service.ccrn)}
            >
              <DataGridCell className="whitespace-nowrap">
                {service.ccrn}
              </DataGridCell>
            </DataGridRow>
          ))}
        </DataGrid>
      </div>

      {/* The CursorPagination component is removed as per the edit hint */}
    </Stack>
  )
} 