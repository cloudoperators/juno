/*
 * SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and Juno contributors
 * SPDX-License-Identifier: Apache-2.0
 */

import React, { useCallback, useState, useMemo } from "react"
import { useNavigate, useRouteContext, useSearch } from "@tanstack/react-router"
import { Panel, PanelBody, Container } from "@cloudoperators/juno-ui-components"
import { MessagesProvider, Messages } from "@cloudoperators/juno-messages-provider"
import { VulnerabilityServicesList } from "./VulnerabilityServicesList"
import { fetchVulnerabilities } from "../../../../api/fetchVulnerabilities"
import { ApolloQueryResult } from "@apollo/client"
import { GetVulnerabilitiesQuery } from "../../../../generated/graphql"

export const VulnerabilityPanel = () => {
  const navigate = useNavigate()
  const { queryClient, apiClient } = useRouteContext({ from: "/vulnerabilities/" })
  const { vulnerability } = useSearch({ from: "/vulnerabilities/" })
  const [currentServicesCursor, setCurrentServicesCursor] = useState<string | null | undefined>(undefined)

  // Create the promise when vulnerability or cursor changes
  const vulnerabilitiesPromise = useMemo(() => {
    if (vulnerability) {
      return fetchVulnerabilities({
        queryClient,
        apiClient,
        filterSettings: {
          selectedFilters: [
            {
              name: "name",
              value: vulnerability
            }
          ]
        },
        afterServices: currentServicesCursor,
      })
    }
    return undefined
  }, [vulnerability, currentServicesCursor])

  const closeVulnerabilityPanel = useCallback(() => {
    navigate({
      to: "/vulnerabilities",
      search: (prev) => {
        const { vulnerability, ...rest } = prev
        return { ...rest }
      },
    })
  }, [navigate])

  const goToServiceDetailsPage = useCallback(
    (serviceCcrn: string) => {
      navigate({
        to: "/services/$service",
        params: { service: serviceCcrn },
      })
    },
    [navigate]
  )

  return (
    <MessagesProvider>
      <Panel
        heading={!!vulnerability ? `${vulnerability} Overview` : undefined}
        opened={!!vulnerability}
        onClose={closeVulnerabilityPanel}
        size="large"
      >
        <PanelBody>
          <Container py px={false}>
            <Messages />
          </Container>
          
          {vulnerability && vulnerabilitiesPromise && (
            <div className="mt-6">
              <VulnerabilityServicesList 
                vulnerabilityName={vulnerability}
                vulnerabilitiesPromise={vulnerabilitiesPromise}
                onServiceClick={goToServiceDetailsPage}
                goToPage={setCurrentServicesCursor}
              />
            </div>
          )}
        </PanelBody>
      </Panel>
    </MessagesProvider>
  )
}
