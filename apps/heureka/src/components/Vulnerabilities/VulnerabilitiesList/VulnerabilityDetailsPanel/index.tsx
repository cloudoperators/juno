/*
 * SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and Juno contributors
 * SPDX-License-Identifier: Apache-2.0
 */

import React, { useCallback, useState, useMemo, Suspense } from "react"
import { useNavigate, useRouteContext, useSearch } from "@tanstack/react-router"
import { Panel, PanelBody } from "@cloudoperators/juno-ui-components"
import { VulnerabilityServicesList } from "./VulnerabilityServicesList"
import { VulnerabilitySupportGroups } from "./VulnerabilitySupportGroups"
import { fetchVulnerabilities } from "../../../../api/fetchVulnerabilities"

export const VulnerabilityPanel = () => {
  const navigate = useNavigate()
  const { queryClient, apiClient } = useRouteContext({ from: "/vulnerabilities/" })
  const { vulnerability } = useSearch({ from: "/vulnerabilities/" })
  const [currentServicesCursor, setCurrentServicesCursor] = useState<string | null | undefined>(undefined)

  // Create a stable promise for vulnerability details (including support groups)
  // This promise doesn't change when pagination happens
  const vulnerabilityDetailsPromise = useMemo(() => {
    if (vulnerability) {
      return fetchVulnerabilities({
        queryClient,
        apiClient,
        filterSettings: {
          selectedFilters: [
            {
              name: "name",
              value: vulnerability,
            },
          ],
        },
        // No afterServices parameter - this is for details only
      })
    }
    return undefined
  }, [vulnerability, queryClient, apiClient])

  // Create a separate promise for services list that changes with pagination
  const servicesListPromise = useMemo(() => {
    if (vulnerability) {
      return fetchVulnerabilities({
        queryClient,
        apiClient,
        filterSettings: {
          selectedFilters: [
            {
              name: "name",
              value: vulnerability,
            },
          ],
        },
        afterServices: currentServicesCursor,
      })
    }
    return undefined
  }, [vulnerability, currentServicesCursor, queryClient, apiClient])

  const closeVulnerabilityPanel = useCallback(() => {
    navigate({
      to: "/vulnerabilities",
      search: (prev) => {
        const { vulnerability, ...rest } = prev
        return { ...rest }
      },
    })
  }, [navigate])

  const goToServiceDetailsPage = useCallback(
    (serviceCcrn: string) => {
      navigate({
        to: "/services/$service",
        params: { service: serviceCcrn },
      })
    },
    [navigate]
  )

  return (
    <Panel
      heading={!!vulnerability ? `${vulnerability} Overview` : undefined}
      opened={!!vulnerability}
      onClose={closeVulnerabilityPanel}
      size="large"
    >
      <PanelBody>
        {vulnerability && vulnerabilityDetailsPromise && (
          <Suspense>
            <VulnerabilitySupportGroups
              vulnerabilitiesPromise={vulnerabilityDetailsPromise}
              vulnerabilityName={vulnerability}
            />
          </Suspense>
        )}
        {vulnerability && servicesListPromise && (
          <VulnerabilityServicesList
            vulnerabilityName={vulnerability}
            vulnerabilitiesPromise={servicesListPromise}
            onServiceClick={goToServiceDetailsPage}
            goToPage={setCurrentServicesCursor}
          />
        )}
      </PanelBody>
    </Panel>
  )
}
