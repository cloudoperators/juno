/*
 * SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and Juno contributors
 * SPDX-License-Identifier: Apache-2.0
 */

import React, { useCallback, useState, useMemo, Suspense } from "react"
import { useNavigate, useRouteContext, useSearch } from "@tanstack/react-router"
import {
  Panel,
  PanelBody,
  DataGridRow,
  DataGridCell,
  DataGridHeadCell,
  DataGrid,
} from "@cloudoperators/juno-ui-components"
import { VulnerabilityServices } from "./VulnerabilityServices"
import { VulnerabilitySupportGroups } from "./VulnerabilitySupportGroups"
import { VulnerabilityServicesTotalCount } from "./VulnerabilityServicesTotalCount"
import { fetchVulnerabilities } from "../../../../api/fetchVulnerabilities"
import { ErrorBoundary } from "../../../common/ErrorBoundary"

export const VulnerabilityPanel = () => {
  const navigate = useNavigate()
  const { queryClient, apiClient } = useRouteContext({ from: "/vulnerabilities/" })
  const { vulnerability } = useSearch({ from: "/vulnerabilities/" })
  const [currentServicesCursor] = useState<string | null | undefined>(undefined)

  // Create a stable promise for vulnerability details (including support groups)
  // This promise doesn't change when pagination happens
  const vulnerabilityDetailsPromise = useMemo(() => {
    if (vulnerability) {
      return fetchVulnerabilities({
        queryClient,
        apiClient,
        filterSettings: {
          selectedFilters: [
            {
              name: "name",
              value: vulnerability,
            },
          ],
        },
        // No afterServices parameter - this is for details only
      })
    }
    return undefined
  }, [vulnerability, queryClient, apiClient])

  // Create a separate promise for services list that changes with pagination
  const servicesPromise = useMemo(() => {
    if (vulnerability) {
      return fetchVulnerabilities({
        queryClient,
        apiClient,
        filterSettings: {
          selectedFilters: [
            {
              name: "name",
              value: vulnerability,
            },
          ],
        },
        afterServices: currentServicesCursor,
      })
    }
    return undefined
  }, [vulnerability, currentServicesCursor, queryClient, apiClient])

  const closeVulnerabilityPanel = useCallback(() => {
    navigate({
      to: "/vulnerabilities",
      search: (prev) => {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const { vulnerability, ...rest } = prev // we're omitting 'vulnerability' from the deps so route does not reload when it changes
        return { ...rest }
      },
    })
  }, [navigate])

  const goToServiceDetailsPage = useCallback(
    (serviceCcrn: string) => {
      navigate({
        to: "/services/$service",
        params: { service: serviceCcrn },
      })
    },
    [navigate]
  )

  return (
    <Panel
      heading={!!vulnerability ? `${vulnerability} Overview` : undefined}
      opened={!!vulnerability}
      onClose={closeVulnerabilityPanel}
      size="large"
    >
      <PanelBody>
        <ErrorBoundary displayErrorMessage>
          {vulnerability && vulnerabilityDetailsPromise && servicesPromise && (
            <Suspense fallback={<div>Loading...</div>}>
              <DataGrid columns={2} gridColumnTemplate="15% auto" minContentColumns={[1]} className="mb-6">
                <DataGridRow>
                  <DataGridHeadCell className="whitespace-nowrap">Support Groups</DataGridHeadCell>
                  <DataGridCell>
                    <VulnerabilitySupportGroups
                      vulnerabilitiesPromise={vulnerabilityDetailsPromise}
                      vulnerabilityName={vulnerability}
                    />
                  </DataGridCell>
                </DataGridRow>
                <DataGridRow>
                  <DataGridHeadCell className="whitespace-nowrap">
                    Services (
                    <VulnerabilityServicesTotalCount
                      vulnerabilitiesPromise={vulnerabilityDetailsPromise}
                      vulnerabilityName={vulnerability}
                    />
                    )
                  </DataGridHeadCell>
                  <DataGridCell>
                    <VulnerabilityServices
                      vulnerabilityName={vulnerability}
                      vulnerabilitiesPromise={servicesPromise}
                      onServiceClick={goToServiceDetailsPage}
                    />
                  </DataGridCell>
                </DataGridRow>
              </DataGrid>
            </Suspense>
          )}
        </ErrorBoundary>
      </PanelBody>
    </Panel>
  )
}
