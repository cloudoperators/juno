import{j as l}from"./jsx-runtime-Cf8x2fCZ.js";import{h}from"./index-FzTzjy2T.js";import{r as a,e as i}from"./index-DN3cvKNT.js";const r=({mode:t="open",delegatesFocus:n=!1,children:s})=>{const e=a.useRef(null),[o,d]=a.useState();return i.useEffect(()=>{e.current&&d(e.current.attachShadow({delegatesFocus:n,mode:t}))},[]),l.jsx("div",{ref:e,"data-shadow-host":"true",style:{height:"100%"},children:o&&h.createPortal(s,o)})};try{r.displayName="ShadowRoot",r.__docgenInfo={description:`Functional component which creates and inserts a shadow dom element
in to the current parent element. ShadowRoot allows html to be isolated from the rest of the DOM. If styles are given, these and
the children are added to the shadow element. The themeClass is added to a wrapper div surrounding the children.`,displayName:"ShadowRoot",props:{mode:{defaultValue:{value:"open"},description:'Choose "closed" to prevent styles from being inherited from the parent node.',name:"mode",required:!1,type:{name:"enum",value:[{value:'"closed"'},{value:'"open"'}]}},delegatesFocus:{defaultValue:{value:"false"},description:"",name:"delegatesFocus",required:!1,type:{name:"boolean"}},children:{defaultValue:null,description:"The children to render",name:"children",required:!1,type:{name:"ReactNode"}}}}}catch{}export{r as S};
