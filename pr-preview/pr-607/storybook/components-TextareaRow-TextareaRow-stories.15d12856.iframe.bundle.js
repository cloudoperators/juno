"use strict";(self.webpackChunk_cloudoperators_juno_ui_components=self.webpackChunk_cloudoperators_juno_ui_components||[]).push([[3975],{"./src/deprecated_js/FormRow/FormRow.component.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{f:()=>FormRow});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/react/index.js"),prop_types__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../../node_modules/prop-types/index.js"),prop_types__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__);function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}const FormRow=_ref=>{let{children=null,className="",...props}=_ref;return react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",_extends({className:`juno-form-row \n  jn-mb-2\n ${className}`},props),children)};FormRow.propTypes={children:prop_types__WEBPACK_IMPORTED_MODULE_1___default().node,className:prop_types__WEBPACK_IMPORTED_MODULE_1___default().string},FormRow.__docgenInfo={description:"A generic FormRow component.\nUsed to layout and structure forms. Pass Form elements such as TextInput, Textarea, Select, or Radio and CheckboxGroups as children.",methods:[],displayName:"FormRow",props:{children:{defaultValue:{value:"null",computed:!1},description:"The children to render in the formRow. Typically, these will be Input components such as TextInput, Textarea, Select, or Radio and CheckboxGroups",type:{name:"node"},required:!1},className:{defaultValue:{value:'""',computed:!1},description:"Add a custom className to a FormRow",type:{name:"string"},required:!1}}}},"./src/deprecated_js/Icon/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{I:()=>_Icon_component__WEBPACK_IMPORTED_MODULE_0__.I});var _Icon_component__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/deprecated_js/Icon/Icon.component.js")},"./src/deprecated_js/withDeprecationWarning/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{P:()=>withDeprecationWarning});var react=__webpack_require__("../../node_modules/react/index.js");const withDeprecationWarning=(WrappedComponent,message)=>props=>((0,react.useEffect)((()=>{console.warn(message)}),[]),react.createElement(WrappedComponent,props))},"./src/components/TextareaRow/TextareaRow.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,Disabled:()=>Disabled,Invalid:()=>Invalid,Required:()=>Required,Valid:()=>Valid,WithErrorText:()=>WithErrorText,WithHelpText:()=>WithHelpText,WithHelpTextWithLink:()=>WithHelpTextWithLink,WithSuccessText:()=>WithSuccessText,__namedExportsOrder:()=>__namedExportsOrder,default:()=>TextareaRow_stories});var react=__webpack_require__("../../node_modules/react/index.js"),prop_types=__webpack_require__("../../node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),Textarea=__webpack_require__("./src/deprecated_js/Textarea/index.js"),FormRow_component=__webpack_require__("./src/deprecated_js/FormRow/FormRow.component.js"),withDeprecationWarning=__webpack_require__("./src/deprecated_js/withDeprecationWarning/index.js");function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}const TextareaRow=_ref=>{let{value="",name=null,label=null,id=null,placeholder=null,required=null,invalid=!1,errortext="",valid=!1,successtext="",helptext=null,className="",disabled=null,onChange,...props}=_ref;return react.createElement(FormRow_component.f,null,react.createElement(Textarea.T,_extends({value,name,id,label,required,placeholder,disabled,invalid,valid,onChange,errortext,helptext,successtext,className},props)))};TextareaRow.propTypes={value:prop_types_default().string,name:prop_types_default().string,label:prop_types_default().string,id:prop_types_default().string,helptext:prop_types_default().node,placeholder:prop_types_default().string,required:prop_types_default().bool,invalid:prop_types_default().bool,errortext:prop_types_default().string,valid:prop_types_default().bool,successtext:prop_types_default().string,className:prop_types_default().string,disabled:prop_types_default().bool,onChange:prop_types_default().func};const TextareaRow_component=(0,withDeprecationWarning.P)(TextareaRow,"TextareaRow is deprecated and will be removed in future versions. To be future-proof, use Textarea instead.");TextareaRow.__docgenInfo={description:"DEPRECATED: A textarea row containing a textarea, associated label, optional helptext, and structural markup. This component is DEPRECATED, use Textarea instead.",methods:[],displayName:"TextareaRow",props:{value:{defaultValue:{value:'""',computed:!1},description:"Optional initial value",type:{name:"string"},required:!1},name:{defaultValue:{value:"null",computed:!1},description:"Name attribute of the textarea element",type:{name:"string"},required:!1},label:{defaultValue:{value:"null",computed:!1},description:"Label text",type:{name:"string"},required:!1},id:{defaultValue:{value:"null",computed:!1},description:"Id",type:{name:"string"},required:!1},placeholder:{defaultValue:{value:"null",computed:!1},description:"Placeholder for the text input. Will not be visible on floating label inputs.",type:{name:"string"},required:!1},required:{defaultValue:{value:"null",computed:!1},description:"Specify whether the input is required",type:{name:"bool"},required:!1},invalid:{defaultValue:{value:"false",computed:!1},description:"Whether the field is invalid",type:{name:"bool"},required:!1},errortext:{defaultValue:{value:'""',computed:!1},description:"Error text to display when validation fails. Will automatically invalidate the field if passed.",type:{name:"string"},required:!1},valid:{defaultValue:{value:"false",computed:!1},description:"Whether the field is valid",type:{name:"bool"},required:!1},successtext:{defaultValue:{value:'""',computed:!1},description:"Text to display when validation is successful. Will automatically set the field to valid if passed.",type:{name:"string"},required:!1},helptext:{defaultValue:{value:"null",computed:!1},description:"Help text",type:{name:"node"},required:!1},className:{defaultValue:{value:'""',computed:!1},description:"Pass a className to the Textarea",type:{name:"string"},required:!1},disabled:{defaultValue:{value:"null",computed:!1},description:"Disable the textarea",type:{name:"bool"},required:!1},onChange:{defaultValue:{value:"undefined",computed:!0},description:"Pass a handler to the checkbox element",type:{name:"func"},required:!1}}};const TextareaRow_stories={title:"Deprecated/TextareaRow",component:TextareaRow_component,parameters:{docs:{description:{component:"DEPRECATED: A textarea row containing a textarea, associated label, optional helptext, and structural markup. This component is DEPRECATED, use Textarea instead."}}},argTypes:{errortext:{control:!1},helptext:{control:!1},successtext:{control:!1},children:{control:!1}}},Default={args:{label:"Default Textarea Row"}},Disabled={args:{label:"Disabled Textarea Row",disabled:!0}},WithHelpText={args:{name:"my-input",label:"Textarea Row with Helptext",helptext:"Oh so helpful helptext"}},WithHelpTextWithLink={args:{name:"my-input",label:"Textarea Row with Helptext",helptext:react.createElement(react.Fragment,null,"Helptext with a ",react.createElement("a",{href:"#"},"Link"))}},Required={args:{label:"Required Textarea",required:!0}},Invalid={args:{label:"Invalid TextareaRow",invalid:!0}},WithErrorText={args:{label:"Textarea Row with Error Text",helptext:"Oh so helpful helptext",errortext:"When passed an errortext prop, the TextareaRow will be set to invalid automatically."},parameters:{docs:{description:{story:"Passing an `errortext` prop to the TextareaRow component will automatically invalidate it, so there is no need to explicitly set `invalid` as well."}}}},Valid={args:{label:"Valid TextareaRow",valid:!0}},WithSuccessText={args:{label:"Textarea Row with Success Text",helptext:"Oh so helpful helptext",successtext:"When passed a successtext prop, the TextareaRow will be set to valid automatically."},parameters:{docs:{description:{story:"Passing a `successtext` prop to the TextareaRow component will automatically set it to valid, so there is no need to explicitly set `valid` as well."}}}},__namedExportsOrder=["Default","Disabled","WithHelpText","WithHelpTextWithLink","Required","Invalid","WithErrorText","Valid","WithSuccessText"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'{\n  args: {\n    label: "Default Textarea Row"\n  }\n}',...Default.parameters?.docs?.source}}},Disabled.parameters={...Disabled.parameters,docs:{...Disabled.parameters?.docs,source:{originalSource:'{\n  args: {\n    label: "Disabled Textarea Row",\n    disabled: true\n  }\n}',...Disabled.parameters?.docs?.source}}},WithHelpText.parameters={...WithHelpText.parameters,docs:{...WithHelpText.parameters?.docs,source:{originalSource:'{\n  args: {\n    name: "my-input",\n    label: "Textarea Row with Helptext",\n    helptext: "Oh so helpful helptext"\n  }\n}',...WithHelpText.parameters?.docs?.source}}},WithHelpTextWithLink.parameters={...WithHelpTextWithLink.parameters,docs:{...WithHelpTextWithLink.parameters?.docs,source:{originalSource:'{\n  args: {\n    name: "my-input",\n    label: "Textarea Row with Helptext",\n    helptext: <>\n        Helptext with a <a href="#">Link</a>\n      </>\n  }\n}',...WithHelpTextWithLink.parameters?.docs?.source}}},Required.parameters={...Required.parameters,docs:{...Required.parameters?.docs,source:{originalSource:'{\n  args: {\n    label: "Required Textarea",\n    required: true\n  }\n}',...Required.parameters?.docs?.source}}},Invalid.parameters={...Invalid.parameters,docs:{...Invalid.parameters?.docs,source:{originalSource:'{\n  args: {\n    label: "Invalid TextareaRow",\n    invalid: true\n  }\n}',...Invalid.parameters?.docs?.source}}},WithErrorText.parameters={...WithErrorText.parameters,docs:{...WithErrorText.parameters?.docs,source:{originalSource:'{\n  args: {\n    label: "Textarea Row with Error Text",\n    helptext: "Oh so helpful helptext",\n    errortext: "When passed an errortext prop, the TextareaRow will be set to invalid automatically."\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: "Passing an `errortext` prop to the TextareaRow component will automatically invalidate it, so there is no need to explicitly set `invalid` as well."\n      }\n    }\n  }\n}',...WithErrorText.parameters?.docs?.source}}},Valid.parameters={...Valid.parameters,docs:{...Valid.parameters?.docs,source:{originalSource:'{\n  args: {\n    label: "Valid TextareaRow",\n    valid: true\n  }\n}',...Valid.parameters?.docs?.source}}},WithSuccessText.parameters={...WithSuccessText.parameters,docs:{...WithSuccessText.parameters?.docs,source:{originalSource:'{\n  args: {\n    label: "Textarea Row with Success Text",\n    helptext: "Oh so helpful helptext",\n    successtext: "When passed a successtext prop, the TextareaRow will be set to valid automatically."\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: "Passing a `successtext` prop to the TextareaRow component will automatically set it to valid, so there is no need to explicitly set `valid` as well."\n      }\n    }\n  }\n}',...WithSuccessText.parameters?.docs?.source}}}}}]);