"use strict";(self.webpackChunk_cloudoperators_juno_ui_components=self.webpackChunk_cloudoperators_juno_ui_components||[]).push([[8695],{"./src/components/Radio/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{s:()=>_Radio_component__WEBPACK_IMPORTED_MODULE_0__.s});var _Radio_component__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/components/Radio/Radio.component.tsx")},"./src/components/RadioRow/RadioRow.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Checked:()=>Checked,Default:()=>Default,Disabled:()=>Disabled,Invalid:()=>Invalid,Required:()=>Required,Valid:()=>Valid,WithErrorText:()=>WithErrorText,WithHelpText:()=>WithHelpText,WithHelpTextWithLink:()=>WithHelpTextWithLink,WithSuccessText:()=>WithSuccessText,__namedExportsOrder:()=>__namedExportsOrder,default:()=>RadioRow_stories});var react=__webpack_require__("../../node_modules/react/index.js"),Radio=__webpack_require__("./src/components/Radio/index.ts"),__assign=function(){return __assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t},__assign.apply(this,arguments)};var RadioRow_component_assign=function(){return RadioRow_component_assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t},RadioRow_component_assign.apply(this,arguments)},__rest=function(s,e){var t={};for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0&&(t[p]=s[p]);if(null!=s&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t},RadioRow=function(_a){var _b=_a.value,value=void 0===_b?"":_b,_c=_a.checked,checked=void 0!==_c&&_c,_d=_a.name,name=void 0===_d?void 0:_d,_e=_a.label,label=void 0===_e?void 0:_e,_f=_a.id,id=void 0===_f?void 0:_f,_g=_a.helptext,helptext=void 0===_g?"":_g,_h=_a.className,className=void 0===_h?"":_h,_j=_a.disabled,disabled=void 0!==_j&&_j,_k=_a.required,required=void 0!==_k&&_k,_l=_a.errortext,errortext=void 0===_l?"":_l,_m=_a.valid,valid=void 0!==_m&&_m,invalid=_a.invalid,_o=_a.successtext,successtext=void 0===_o?"":_o,_p=_a.onChange,onChange=void 0===_p?void 0:_p,props=__rest(_a,["value","checked","name","label","id","helptext","className","disabled","required","errortext","valid","invalid","successtext","onChange"]);return react.createElement(Radio.s,RadioRow_component_assign({value,checked,name,label,id,helptext,disabled,required,invalid,valid,errortext,successtext,className,onChange},props))};const RadioRow_component=function withDeprecationWarning(WrappedComponent,message){return function(props){return(0,react.useEffect)((function(){console.warn(message)}),[]),react.createElement(WrappedComponent,__assign({},props))}}(RadioRow,"RadioRow is deprecated and will be removed in future versions. To be future-proof, use Radio instead.");RadioRow.__docgenInfo={description:"DEPRECATED: A radio row containing a radio, associated label, and structural markup. This component is DEPRECATED, use Radio instead.",methods:[],displayName:"RadioRow",props:{value:{required:!1,tsType:{name:"string"},description:"Optional initial value",defaultValue:{value:'""',computed:!1}},checked:{required:!1,tsType:{name:"boolean"},description:"Pass checked state",defaultValue:{value:"false",computed:!1}},name:{required:!1,tsType:{name:"string"},description:"Name attribute of the Radio element",defaultValue:{value:"undefined",computed:!0}},label:{required:!1,tsType:{name:"string"},description:"Label text",defaultValue:{value:"undefined",computed:!0}},id:{required:!1,tsType:{name:"string"},description:"Id",defaultValue:{value:"undefined",computed:!0}},helptext:{required:!1,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:"Help text",defaultValue:{value:'""',computed:!1}},disabled:{required:!1,tsType:{name:"boolean"},description:"Pass to disable the Radio",defaultValue:{value:"false",computed:!1}},required:{required:!1,tsType:{name:"boolean"},description:"Whether the Radio is required",defaultValue:{value:"false",computed:!1}},invalid:{required:!1,tsType:{name:"boolean"},description:"Whether the Radio is invalid"},errortext:{required:!1,tsType:{name:"union",raw:"React.ReactNode | string",elements:[{name:"ReactReactNode",raw:"React.ReactNode"},{name:"string"}]},description:"Error text to be displayed. When passed, the Radio will automatically be invalidated.",defaultValue:{value:'""',computed:!1}},valid:{required:!1,tsType:{name:"boolean"},description:"Whether the Radio is valid",defaultValue:{value:"false",computed:!1}},successtext:{required:!1,tsType:{name:"union",raw:"React.ReactNode | string",elements:[{name:"ReactReactNode",raw:"React.ReactNode"},{name:"string"}]},description:"Success text to be displayed when the Radio is valid. When passed, will set the radio to valid automatically.",defaultValue:{value:'""',computed:!1}},className:{required:!1,tsType:{name:"string"},description:"Pass a className",defaultValue:{value:'""',computed:!1}},onChange:{required:!1,tsType:{name:"signature",type:"function",raw:"(_value: string | undefined) => void",signature:{arguments:[{type:{name:"union",raw:"string | undefined",elements:[{name:"string"},{name:"undefined"}]},name:"_value"}],return:{name:"void"}}},description:"Pass a handler to the checkbox element",defaultValue:{value:"undefined",computed:!0}}}};const RadioRow_stories={title:"Deprecated/RadioRow",component:RadioRow_component,parameters:{docs:{description:{component:"DEPRECATED: A radio row containing a radio, associated label, and structural markup. This component is DEPRECATED, use Radio instead."}}},argTypes:{}};var Default={args:{label:"Default Radio Row",id:"radio-row-default"}},Checked={args:{label:"Checked Radio Row",checked:!0,id:"radio-row-checked"}},WithHelpText={args:{name:"my-input",label:"Radio Row with help text",helptext:"Oh so helpful helptext",id:"radio-row-withHelptext"}},WithHelpTextWithLink={args:{name:"my-input",label:"Radio Row with help text",helptext:react.createElement(react.Fragment,null,"Helptext with a ",react.createElement("a",{href:"#"},"Link")),id:"radio-row-withHelptext-WithLink"}},Disabled={args:{label:"Disabled Radio",id:"radio-row-disabled",disabled:!0}},Required={args:{label:"Required Radio",id:"required-radio",required:!0}},Invalid={args:{label:"Invalid Option",invalid:!0}},WithErrorText={args:{label:"Option with Error Text",helptext:"Oh so helpful helptext",errortext:"When passed an errortext prop, the RadioRow will be set to invalid automatically."},parameters:{docs:{description:{story:"Passing an `errortext` prop to the RadioRow component will automatically invalidate it, so there is no need to explicitly set `invalid` as well."}}}},Valid={args:{label:"Valid Option",valid:!0}},WithSuccessText={args:{label:"Radio validated by successtext",successtext:"Pass a successtext to validate a CheckboxRow"}};const __namedExportsOrder=["Default","Checked","WithHelpText","WithHelpTextWithLink","Disabled","Required","Invalid","WithErrorText","Valid","WithSuccessText"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'{\n  args: {\n    label: "Default Radio Row",\n    id: "radio-row-default"\n  }\n}',...Default.parameters?.docs?.source}}},Checked.parameters={...Checked.parameters,docs:{...Checked.parameters?.docs,source:{originalSource:'{\n  args: {\n    label: "Checked Radio Row",\n    checked: true,\n    id: "radio-row-checked"\n  }\n}',...Checked.parameters?.docs?.source}}},WithHelpText.parameters={...WithHelpText.parameters,docs:{...WithHelpText.parameters?.docs,source:{originalSource:'{\n  args: {\n    name: "my-input",\n    label: "Radio Row with help text",\n    helptext: "Oh so helpful helptext",\n    id: "radio-row-withHelptext"\n  }\n}',...WithHelpText.parameters?.docs?.source}}},WithHelpTextWithLink.parameters={...WithHelpTextWithLink.parameters,docs:{...WithHelpTextWithLink.parameters?.docs,source:{originalSource:'{\n  args: {\n    name: "my-input",\n    label: "Radio Row with help text",\n    helptext: <>\n        Helptext with a <a href="#">Link</a>\n      </>,\n    id: "radio-row-withHelptext-WithLink"\n  }\n}',...WithHelpTextWithLink.parameters?.docs?.source}}},Disabled.parameters={...Disabled.parameters,docs:{...Disabled.parameters?.docs,source:{originalSource:'{\n  args: {\n    label: "Disabled Radio",\n    id: "radio-row-disabled",\n    disabled: true\n  }\n}',...Disabled.parameters?.docs?.source}}},Required.parameters={...Required.parameters,docs:{...Required.parameters?.docs,source:{originalSource:'{\n  args: {\n    label: "Required Radio",\n    id: "required-radio",\n    required: true\n  }\n}',...Required.parameters?.docs?.source}}},Invalid.parameters={...Invalid.parameters,docs:{...Invalid.parameters?.docs,source:{originalSource:'{\n  args: {\n    label: "Invalid Option",\n    invalid: true\n  }\n}',...Invalid.parameters?.docs?.source}}},WithErrorText.parameters={...WithErrorText.parameters,docs:{...WithErrorText.parameters?.docs,source:{originalSource:'{\n  args: {\n    label: "Option with Error Text",\n    helptext: "Oh so helpful helptext",\n    errortext: "When passed an errortext prop, the RadioRow will be set to invalid automatically."\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: "Passing an `errortext` prop to the RadioRow component will automatically invalidate it, so there is no need to explicitly set `invalid` as well."\n      }\n    }\n  }\n}',...WithErrorText.parameters?.docs?.source}}},Valid.parameters={...Valid.parameters,docs:{...Valid.parameters?.docs,source:{originalSource:'{\n  args: {\n    label: "Valid Option",\n    valid: true\n  }\n}',...Valid.parameters?.docs?.source}}},WithSuccessText.parameters={...WithSuccessText.parameters,docs:{...WithSuccessText.parameters?.docs,source:{originalSource:'{\n  args: {\n    label: "Radio validated by successtext",\n    successtext: "Pass a successtext to validate a CheckboxRow"\n  }\n}',...WithSuccessText.parameters?.docs?.source}}}}}]);