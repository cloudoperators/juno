"use strict";(self.webpackChunk_cloudoperators_juno_ui_components=self.webpackChunk_cloudoperators_juno_ui_components||[]).push([[1249],{"./src/components/GridColumn/GridColumn.component.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{H:()=>GridColumn});var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/react/jsx-runtime.js"),__assign=(__webpack_require__("../../node_modules/react/index.js"),function(){return __assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t},__assign.apply(this,arguments)}),__rest=function(s,e){var t={};for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0&&(t[p]=s[p]);if(null!=s&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t},columnWidthStyles={0:"jn-w-grid-column-default",1:"jn-w-grid-col-1",2:"jn-w-grid-col-2",3:"jn-w-grid-col-3",4:"jn-w-grid-col-4",5:"jn-w-grid-col-5",6:"jn-w-grid-col-6",7:"jn-w-grid-col-7",8:"jn-w-grid-col-8",9:"jn-w-grid-col-9",10:"jn-w-grid-col-10",11:"jn-w-grid-col-11",12:"jn-w-grid-col-12"},autoColumnStyles={flexGrow:"1",flexShrink:"0",flexBasis:"0"},getColumnWidthStyles=function(cols){return!cols||cols<1||cols>12?columnWidthStyles[0]:columnWidthStyles[cols]},GridColumn=function(_a){var _b=_a.width,width=void 0===_b?null:_b,_c=_a.cols,cols=void 0===_c?null:_c,_d=_a.auto,auto=void 0!==_d&&_d,_e=_a.className,className=void 0===_e?"":_e,_f=_a.children,children=void 0===_f?null:_f,props=__rest(_a,["width","cols","auto","className","children"]),widthBasedStyles=width?{width:"".concat(width,"%"),flexGrow:"0",flexShrink:"0",flexBasis:"".concat(width,"%")}:{},finalColumnStyles=width?widthBasedStyles:auto?autoColumnStyles:{};return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div",__assign({className:"juno-grid-column ".concat("\n  jn-flex-grid-column\n  jn-p-grid-column\n"," ").concat(getColumnWidthStyles(cols)," ").concat(className),style:finalColumnStyles},props,{children}))};try{GridColumn.displayName="GridColumn",GridColumn.__docgenInfo={description:"A flexible grid column component used within a Grid.",displayName:"GridColumn",props:{cols:{defaultValue:{value:"null"},description:"The number of columns to span the column over.",name:"cols",required:!1,type:{name:"number"}},width:{defaultValue:{value:"null"},description:"The width in percent.\nIf a width is given, it will override the 'cols' prop.",name:"width",required:!1,type:{name:"number"}},auto:{defaultValue:{value:"false"},description:"Determines whether the column should set an auto width.",name:"auto",required:!1,type:{name:"boolean"}},className:{defaultValue:{value:""},description:"Additional CSS classes to apply to the grid column for custom styling.",name:"className",required:!1,type:{name:"string"}},children:{defaultValue:{value:"null"},description:"Content to be rendered inside the column.",name:"children",required:!1,type:{name:"any"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/GridColumn/GridColumn.component.tsx#GridColumn"]={docgenInfo:GridColumn.__docgenInfo,name:"GridColumn",path:"src/components/GridColumn/GridColumn.component.tsx#GridColumn"})}catch(__react_docgen_typescript_loader_error){}},"./src/components/GridRow/GridRow.component.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{T:()=>GridRow});var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/react/jsx-runtime.js"),__assign=(__webpack_require__("../../node_modules/react/index.js"),function(){return __assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t},__assign.apply(this,arguments)}),__rest=function(s,e){var t={};for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0&&(t[p]=s[p]);if(null!=s&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t},GridRow=function(_a){var _b=_a.children,children=void 0===_b?null:_b,_c=_a.className,className=void 0===_c?"":_c,props=__rest(_a,["children","className"]);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div",__assign({className:"juno-grid-row ".concat("\n    jn-flex\n    jn-flex-wrap\n    jn-m-grid-row\n"," ").concat(className)},props,{children}))};try{GridRow.displayName="GridRow",GridRow.__docgenInfo={description:"A grid row container to hold GridColumn elements inside a Grid.\nThis component ensures that its children are wrapped correctly in a flexbox layout.",displayName:"GridRow",props:{children:{defaultValue:{value:"null"},description:"Elements to be rendered within the grid row.\nTypically, these would be GridColumn components.",name:"children",required:!1,type:{name:"any"}},className:{defaultValue:{value:""},description:"Additional CSS classes to apply to the grid row for custom styling.",name:"className",required:!1,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/GridRow/GridRow.component.tsx#GridRow"]={docgenInfo:GridRow.__docgenInfo,name:"GridRow",path:"src/components/GridRow/GridRow.component.tsx#GridRow"})}catch(__react_docgen_typescript_loader_error){}},"./src/components/Grid/Grid.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Auto:()=>Auto,Default:()=>Default,MixedAutoGrid:()=>MixedAutoGrid,MixedGrid:()=>MixedGrid,NestedGrid:()=>NestedGrid,__namedExportsOrder:()=>__namedExportsOrder,default:()=>Grid_stories});var jsx_runtime=__webpack_require__("../../node_modules/react/jsx-runtime.js"),__assign=(__webpack_require__("../../node_modules/react/index.js"),function(){return __assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t},__assign.apply(this,arguments)}),__rest=function(s,e){var t={};for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0&&(t[p]=s[p]);if(null!=s&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t},autoStyles={"--grid-column-flex-grow":"1","--grid-column-flex-shrink":"0","--grid-column-flex-basis":"0","--grid-column-default-width":"auto"},Grid=function(_a){var _b=_a.auto,auto=void 0!==_b&&_b,_c=_a.children,children=void 0===_c?null:_c,_d=_a.className,className=void 0===_d?"":_d,props=__rest(_a,["auto","children","className"]),gridStyles=auto?autoStyles:{};return(0,jsx_runtime.jsx)("div",__assign({className:"juno-grid ".concat(className),style:gridStyles},props,{children}))};try{Grid.displayName="Grid",Grid.__docgenInfo={description:"A general-use grid component.\nUsed in conjunction with GridColumn and GridRow components to create a flexible grid layout.",displayName:"Grid",props:{auto:{defaultValue:{value:"false"},description:"Controls whether columns should auto-size.\nIf true, this will override the default 12-column grid layout.",name:"auto",required:!1,type:{name:"boolean"}},children:{defaultValue:{value:"null"},description:"Elements to be rendered within the grid.",name:"children",required:!1,type:{name:"any"}},className:{defaultValue:{value:""},description:"Additional CSS classes to apply to the grid for custom styling.",name:"className",required:!1,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Grid/Grid.component.tsx#Grid"]={docgenInfo:Grid.__docgenInfo,name:"Grid",path:"src/components/Grid/Grid.component.tsx#Grid"})}catch(__react_docgen_typescript_loader_error){}var GridRow_component=__webpack_require__("./src/components/GridRow/GridRow.component.tsx"),GridColumn_component=__webpack_require__("./src/components/GridColumn/GridColumn.component.tsx"),Grid_stories_assign=function(){return Grid_stories_assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t},Grid_stories_assign.apply(this,arguments)};const Grid_stories={title:"Layout/Grid/Grid",component:Grid,argTypes:{children:{control:!1}},decorators:[function(Story,context){return(0,jsx_runtime.jsx)("div",{className:"juno-container jn-px-6 jn-py-6",children:(0,jsx_runtime.jsx)(Story,Grid_stories_assign({},context))})}]};var Template=function(args,context){return(0,jsx_runtime.jsx)(Grid,Grid_stories_assign({},args,{className:"jn-bg-juno-blue-3 jn-text-juno-grey-blue ".concat(args.className),children:context.args.children}))},Default={render:Template,parameters:{docs:{description:{story:"By default, Juno uses a 12-column fluid grid. Columns can be made to span multiple columns by passing `cols={n}`."}}},args:{children:[(0,jsx_runtime.jsxs)(GridRow_component.T,{children:[(0,jsx_runtime.jsx)(GridColumn_component.H,{children:"Column"}),(0,jsx_runtime.jsx)(GridColumn_component.H,{children:"Column"}),(0,jsx_runtime.jsx)(GridColumn_component.H,{children:"Column"}),(0,jsx_runtime.jsx)(GridColumn_component.H,{children:"Column"}),(0,jsx_runtime.jsx)(GridColumn_component.H,{children:"Column"}),(0,jsx_runtime.jsx)(GridColumn_component.H,{children:"Column"}),(0,jsx_runtime.jsx)(GridColumn_component.H,{children:"Column"}),(0,jsx_runtime.jsx)(GridColumn_component.H,{children:"Column"}),(0,jsx_runtime.jsx)(GridColumn_component.H,{children:"Column"}),(0,jsx_runtime.jsx)(GridColumn_component.H,{children:"Column"}),(0,jsx_runtime.jsx)(GridColumn_component.H,{children:"Column"}),(0,jsx_runtime.jsx)(GridColumn_component.H,{children:"Column"})]},"1"),(0,jsx_runtime.jsxs)(GridRow_component.T,{children:[(0,jsx_runtime.jsx)(GridColumn_component.H,{children:"Column"}),(0,jsx_runtime.jsx)(GridColumn_component.H,{cols:3,children:"Column cols-3"}),(0,jsx_runtime.jsx)(GridColumn_component.H,{cols:5,children:"Column cols-5"}),(0,jsx_runtime.jsx)(GridColumn_component.H,{cols:2,children:"Column cols-2"})]},"2")]}},Auto={render:Template,parameters:{docs:{description:{story:"By passing `auto` to the grid, all of its contained columns will automatically size to share available space equally. Columns with `cols={n}` will switch their behaviour to auto-size."}}},args:{auto:!0,children:[(0,jsx_runtime.jsxs)(GridRow_component.T,{children:[(0,jsx_runtime.jsx)(GridColumn_component.H,{children:"Column"}),(0,jsx_runtime.jsx)(GridColumn_component.H,{children:"Column"}),(0,jsx_runtime.jsx)(GridColumn_component.H,{children:"Column"}),(0,jsx_runtime.jsx)(GridColumn_component.H,{children:"Column"}),(0,jsx_runtime.jsx)(GridColumn_component.H,{children:"Column"})]},"1"),(0,jsx_runtime.jsxs)(GridRow_component.T,{children:[(0,jsx_runtime.jsx)(GridColumn_component.H,{children:"Column"}),(0,jsx_runtime.jsx)(GridColumn_component.H,{children:"Column"}),(0,jsx_runtime.jsx)(GridColumn_component.H,{children:"Column"})]},"2"),(0,jsx_runtime.jsxs)(GridRow_component.T,{children:[(0,jsx_runtime.jsx)(GridColumn_component.H,{children:"Column"}),(0,jsx_runtime.jsx)(GridColumn_component.H,{children:"Column"}),(0,jsx_runtime.jsx)(GridColumn_component.H,{children:"Column"}),(0,jsx_runtime.jsx)(GridColumn_component.H,{children:"Column"}),(0,jsx_runtime.jsx)(GridColumn_component.H,{children:"Column"}),(0,jsx_runtime.jsx)(GridColumn_component.H,{children:"Column"}),(0,jsx_runtime.jsx)(GridColumn_component.H,{children:"Column"}),(0,jsx_runtime.jsx)(GridColumn_component.H,{children:"Column"})]},"3")]}},MixedGrid={render:Template,args:{children:(0,jsx_runtime.jsxs)(GridRow_component.T,{children:[(0,jsx_runtime.jsx)(GridColumn_component.H,{children:"Column"}),(0,jsx_runtime.jsx)(GridColumn_component.H,{auto:!0,children:"Auto Column"}),(0,jsx_runtime.jsx)(GridColumn_component.H,{width:10,children:"Column 10%"}),(0,jsx_runtime.jsx)(GridColumn_component.H,{cols:3,children:"Column cols-3"})]})}},MixedAutoGrid={render:Template,args:{auto:!0,children:(0,jsx_runtime.jsxs)(GridRow_component.T,{children:[(0,jsx_runtime.jsx)(GridColumn_component.H,{children:"Column"}),(0,jsx_runtime.jsx)(GridColumn_component.H,{auto:!0,children:"Auto Column"}),(0,jsx_runtime.jsx)(GridColumn_component.H,{width:10,children:"Column 10%"}),(0,jsx_runtime.jsx)(GridColumn_component.H,{cols:3,children:"Column cols-3"})]})}},NestedGrid={render:Template,args:{children:(0,jsx_runtime.jsxs)(GridRow_component.T,{children:[(0,jsx_runtime.jsx)(GridColumn_component.H,{cols:3,children:"Column cols-3"}),(0,jsx_runtime.jsx)(GridColumn_component.H,{cols:9,children:(0,jsx_runtime.jsx)(Grid,{children:(0,jsx_runtime.jsxs)(GridRow_component.T,{children:[(0,jsx_runtime.jsx)(GridColumn_component.H,{width:33.333333,className:"bg-juno-blue-2",children:"Nested Column 33.333333%"}),(0,jsx_runtime.jsx)(GridColumn_component.H,{width:66.666666,className:"bg-juno-blue-2",children:"Nested Column 66.666666%"})]})})})]})}};const __namedExportsOrder=["Default","Auto","MixedGrid","MixedAutoGrid","NestedGrid"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'{\n  render: Template,\n  parameters: {\n    docs: {\n      description: {\n        story: "By default, Juno uses a 12-column fluid grid. Columns can be made to span multiple columns by passing `cols={n}`."\n      }\n    }\n  },\n  args: {\n    children: [<GridRow key="1">\n        <GridColumn>Column</GridColumn>\n        <GridColumn>Column</GridColumn>\n        <GridColumn>Column</GridColumn>\n        <GridColumn>Column</GridColumn>\n        <GridColumn>Column</GridColumn>\n        <GridColumn>Column</GridColumn>\n        <GridColumn>Column</GridColumn>\n        <GridColumn>Column</GridColumn>\n        <GridColumn>Column</GridColumn>\n        <GridColumn>Column</GridColumn>\n        <GridColumn>Column</GridColumn>\n        <GridColumn>Column</GridColumn>\n      </GridRow>, <GridRow key="2">\n        <GridColumn>Column</GridColumn>\n        <GridColumn cols={3}>Column cols-3</GridColumn>\n        <GridColumn cols={5}>Column cols-5</GridColumn>\n        <GridColumn cols={2}>Column cols-2</GridColumn>\n      </GridRow>]\n  }\n}',...Default.parameters?.docs?.source}}},Auto.parameters={...Auto.parameters,docs:{...Auto.parameters?.docs,source:{originalSource:'{\n  render: Template,\n  parameters: {\n    docs: {\n      description: {\n        story: "By passing `auto` to the grid, all of its contained columns will automatically size to share available space equally. Columns with `cols={n}` will switch their behaviour to auto-size."\n      }\n    }\n  },\n  args: {\n    auto: true,\n    children: [<GridRow key="1">\n        <GridColumn>Column</GridColumn>\n        <GridColumn>Column</GridColumn>\n        <GridColumn>Column</GridColumn>\n        <GridColumn>Column</GridColumn>\n        <GridColumn>Column</GridColumn>\n      </GridRow>, <GridRow key="2">\n        <GridColumn>Column</GridColumn>\n        <GridColumn>Column</GridColumn>\n        <GridColumn>Column</GridColumn>\n      </GridRow>, <GridRow key="3">\n        <GridColumn>Column</GridColumn>\n        <GridColumn>Column</GridColumn>\n        <GridColumn>Column</GridColumn>\n        <GridColumn>Column</GridColumn>\n        <GridColumn>Column</GridColumn>\n        <GridColumn>Column</GridColumn>\n        <GridColumn>Column</GridColumn>\n        <GridColumn>Column</GridColumn>\n      </GridRow>]\n  }\n}',...Auto.parameters?.docs?.source}}},MixedGrid.parameters={...MixedGrid.parameters,docs:{...MixedGrid.parameters?.docs,source:{originalSource:"{\n  render: Template,\n  args: {\n    children: <GridRow>\n        <GridColumn>Column</GridColumn>\n        <GridColumn auto>Auto Column</GridColumn>\n        <GridColumn width={10}>Column 10%</GridColumn>\n        <GridColumn cols={3}>Column cols-3</GridColumn>\n      </GridRow>\n  }\n}",...MixedGrid.parameters?.docs?.source}}},MixedAutoGrid.parameters={...MixedAutoGrid.parameters,docs:{...MixedAutoGrid.parameters?.docs,source:{originalSource:"{\n  render: Template,\n  args: {\n    auto: true,\n    children: <GridRow>\n        <GridColumn>Column</GridColumn>\n        <GridColumn auto>Auto Column</GridColumn>\n        <GridColumn width={10}>Column 10%</GridColumn>\n        <GridColumn cols={3}>Column cols-3</GridColumn>\n      </GridRow>\n  }\n}",...MixedAutoGrid.parameters?.docs?.source}}},NestedGrid.parameters={...NestedGrid.parameters,docs:{...NestedGrid.parameters?.docs,source:{originalSource:'{\n  render: Template,\n  args: {\n    children: <GridRow>\n        <GridColumn cols={3}>Column cols-3</GridColumn>\n        <GridColumn cols={9}>\n          <Grid>\n            <GridRow>\n              <GridColumn width={33.333333} className="bg-juno-blue-2">\n                Nested Column 33.333333%\n              </GridColumn>\n              <GridColumn width={66.666666} className="bg-juno-blue-2">\n                Nested Column 66.666666%\n              </GridColumn>\n            </GridRow>\n          </Grid>\n        </GridColumn>\n      </GridRow>\n  }\n}',...NestedGrid.parameters?.docs?.source}}}}}]);