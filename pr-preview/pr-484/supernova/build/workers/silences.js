function f(t){let e={serviceName:null,initialFetch:!0,fetchFn:null,watch:!0,watchInterval:3e5,onFetchStart:null,onFetchEnd:null,onFetchError:null,debug:!1},s=!1,n=Object.keys(e),o,a=()=>{if(e.fetchFn)return e.onFetchStart&&e.onFetchStart(),e?.debug&&console.info(`ApiService::${e.serviceName||""}: start fetch`),s=!0,e.fetchFn().then(()=>{e.onFetchEnd&&e.onFetchEnd()}).catch(r=>{r?.httperror&&(r.message="API: "+r.message),r.message=="Failed to fetch"&&(r.message="Could not reach endpoint. Possible causes could include network issues, incorrect URL, or server outages."),console.warn("ApiService::%s:%s",e.serviceName,r),e.onFetchError&&e.onFetchError(r)});e?.debug&&console.warn(`ApiService::${e.serviceName||""}: missing fetch function`)},d=r=>{s&&r.watch===e.watch&&r.watchInterval===e.watchInterval||(clearInterval(o),e.watch&&(o=setInterval(a,e.watchInterval||3e5)))};this.configure=r=>{let g={...e};e={...e,...r},Object.keys(e).forEach(i=>n.indexOf(i)<0&&delete e[i]),e?.debug&&console.debug("ApiService::%s: new config: %s",e.serviceName,e),d(g),e.initialFetch&&!s&&a()},this.fetch=a,this.configure(t)}var l=f;var c=class extends Error{constructor(e,s){super(s||e),this.name="HTTPError",this.statusCode=e}},E=t=>t.status<400?t:t.text().then(e=>{var s=new c(t.status,e||t.statusText);return s.statusCode=t.status,s.httperror=!0,Promise.reject(s)}),m={"Content-Type":"application/json",Accept:"application/json"},S=(t,e={})=>{let s={headers:m,...e};return fetch(t,s).then(E).then(n=>{let o=n.headers.get("Content-Type");return o&&o.includes("application/json")?n.json():n.text()})};var u=(t,e={})=>S(t,{method:"GET",...e});var h=t=>{let e={};return!t||t.length===0?{}:(t.forEach(s=>{let n=s.status?.state;e[n]||(e[n]=[]),e[n].push(s)}),e)};var v=t=>u(`${t}/silences`,{}).then(e=>{let s=e.reduce((o,a)=>(o[a.id]=a,o),{}),n=h(e);self.postMessage({action:"SILENCES_UPDATE",silences:e,silencesHash:s,silencesBySate:n})}),p=new l({serviceName:"silences",debug:!0,onFetchStart:()=>self.postMessage({action:"SILENCES_FETCH_START"}),onFetchEnd:()=>self.postMessage({action:"SILENCES_FETCH_END"}),onFetchError:t=>{self.postMessage({action:"SILENCES_FETCH_ERROR",error:t.message})}});self.onmessage=t=>{switch(t.data.action){case"SILENCES_CONFIGURE":t.data?.apiEndpoint&&(t.data.fetchFn=()=>v(t.data?.apiEndpoint)),p.configure(t.data);break;case"SILENCES_FETCH":p.fetch();break}};export{v as fetchAction};
