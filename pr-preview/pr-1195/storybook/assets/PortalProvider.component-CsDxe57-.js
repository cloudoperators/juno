import{r,b as u,j as s}from"./iframe-DnnGGfCO.js";const P={position:"relative",zIndex:"1"},d=({children:e})=>{const t=r.useContext(l),[n,a]=r.useState(!1);if(r.useEffect(()=>{t?.current&&a(!0)},[t]),!n)return null;const o=s.jsx("div",{className:"juno-portal",style:P,children:e});return u.createPortal(o,t.current||document.body)};d.displayName="PortalProvider.Portal";try{PortalProvider.Portal.displayName="PortalProvider.Portal",PortalProvider.Portal.__docgenInfo={description:"A PortalProvider.Portal component to directly use from within other components:\n```\n <PortalProvider.Portal>\n   <MyComponent />\n </PortalProvider.Portal>\n```",displayName:"PortalProvider.Portal",props:{children:{defaultValue:null,description:"The children to mount in a portal. Typically, these will be menus, modal dialogs, etc.",name:"children",required:!1,type:{name:"ReactNode"}}}}}catch{}const m="juno-portal-root",l=r.createContext(void 0),f={position:"absolute",top:"0",left:"0",zIndex:"9999"};function c(){const e=r.useContext(l),t=r.useRef(null),[n,a]=r.useState(!1);return r.useEffect(()=>{if(!e||!e?.current){console.warn("usePortalRef must be called inside a PortalProvider. You are probably using a component that renders a portal, e.g. Modal or Select. Make sure your app is wrapped in an AppShellProvider. Alternatively, a PortalProvider can be included manually.");return}const o=document.createElement("div");return o.style.position="relative",o.style.zIndex="1",o.classList.add("juno-portal"),e.current.append(o),t.current=o,a(!0),()=>{t.current&&e?.current&&(e.current.removeChild(t.current),t.current=null)}},[e]),t?.current&&n?t.current:null}const i=({children:e,className:t="",id:n=m})=>{const a=r.useRef(null),[o,p]=r.useState(!1);return r.useEffect(()=>{a.current&&p(!0)},[]),s.jsxs(l.Provider,{value:a,children:[o&&e,s.jsx("div",{className:`juno-portal-root ${t}`,id:n,ref:a,style:f})]})};i.Portal=d;try{c.displayName="usePortalRef",c.__docgenInfo={description:"A hook that creates a portal container in the current portal root, and returns this newly created container as a node to use in other components:\n```\n const portalRef = usePortalRef()\n\n createPortal(<MyComponent />, portalRef ? portalRef : document.body)\n```\nThe ref to the portal container element can also be passed as a parameter to components that expect a reference element for positioning, such as Flatpickr / DateTimePickr.",displayName:"usePortalRef",props:{}}}catch{}try{l.displayName="PortalContext",l.__docgenInfo={description:"",displayName:"PortalContext",props:{}}}catch{}try{i.displayName="PortalProvider",i.__docgenInfo={description:"A PortalProvider component that helps using and managing portals.\nIt renders a portal root container, creates a context to expose a ref the container, a `PortalProvider.Portal` component to render content into a portal, and a `usePortalRef` hook to render content into a portal.\nNormally, there is no need to include `PortalProvider` manually, when using `AppShell` `PortalProvider` is already included in the app.",displayName:"PortalProvider",props:{className:{defaultValue:{value:""},description:"Optionally a class name can be passed to the portal container which is the container where portals are created by PortalProvider",name:"className",required:!1,type:{name:"string"}},id:{defaultValue:{value:"juno-portal-root"},description:"Optionally an id can be passed to the portal container which is the container where portals are created by PortalProvider",name:"id",required:!1,type:{name:"string"}},children:{defaultValue:null,description:"The PortalProvider must have children. It is typically used as a wrapper for the whole app.",name:"children",required:!1,type:{name:"ReactNode"}}}}}catch{}export{i as P,c as u};
