import{e as f,j as d,r as h}from"./iframe-DUlJJqWb.js";const g=`
	jn:grid
	jn:items-stretch
`,w=(e,a,i,t,n)=>{let l;if(n&&n.length>0)return l={gridTemplateColumns:n},l;let r="";return t&&Array.isArray(t)&&t.length>0?[...Array(e)].map((o,c)=>{r+=t.includes(c)?"min-content ":`minmax(${i}, ${a}) `}):r=`repeat(${e}, minmax(${i}, ${a}))`,l={gridTemplateColumns:r},l},y=f.createContext({}),v=()=>f.useContext(y),p=({columns:e=1,columnMaxSize:a="auto",columnMinSize:i="0px",minContentColumns:t,gridColumnTemplate:n,cellVerticalAlignment:l="center",className:r="",children:s,...o})=>{const c={cellVerticalAlignment:l};return d.jsx(y.Provider,{value:c,children:d.jsx("div",{className:`juno-datagrid ${g} ${r}`,style:w(e,a,i,t,n),role:"grid",...o,children:s})})};try{p.displayName="DataGrid",p.__docgenInfo={description:"The DataGrid component is the main way to display lists of items that have a bunch of metadata that you want to display.",displayName:"DataGrid",props:{columns:{defaultValue:{value:"1"},description:"Set number of columns",name:"columns",required:!1,type:{name:"number"}},columnMaxSize:{defaultValue:{value:"auto"},description:'Set column max sizing. Default: auto. For equally sized columns use "1fr"',name:"columnMaxSize",required:!1,type:{name:"string"}},columnMinSize:{defaultValue:{value:"0px"},description:"Set column minimum size. Default: 0px",name:"columnMinSize",required:!1,type:{name:"string"}},minContentColumns:{defaultValue:null,description:"Specify which columns should be sized by minimum content size (i.e. as small as possible). Pass an array of column numbers (first column is 0)",name:"minContentColumns",required:!1,type:{name:"number[]"}},gridColumnTemplate:{defaultValue:null,description:`Set the grid column template in CSS grid 'grid-template-columns' notation. If this prop is passed, all other template props (columns, columnMaxSize,
columnMinSize, minContentColumns) are ignored. The easiest case where you might need this is e.g. if you want to set specific column widths for some
or all columns, e.g. "20% auto auto 10%" (The first column is set to 20%, the next two to auto size, the last to 10%).`,name:"gridColumnTemplate",required:!1,type:{name:"string"}},cellVerticalAlignment:{defaultValue:{value:"center"},description:`Set the vertical alignment for all GridCells. Default: center. PLEASE NOTE: the center alignment is achieved by using a flexbox column layout,
which means that all child elements of the cell will be stacked vertically. To avoid this, wrap the elements in their own div`,name:"cellVerticalAlignment",required:!1,type:{name:"enum",value:[{value:'"center"'},{value:'"top"'}]}},children:{defaultValue:null,description:"Children to render in the DataGrid",name:"children",required:!1,type:{name:"ReactNode"}},className:{defaultValue:{value:""},description:"Add a class name",name:"className",required:!1,type:{name:"string"}}}}}catch{}const u=h.forwardRef(({isSelected:e=!1,onClick:a,className:i="",children:t,...n},l)=>{const r=o=>{a&&a(o)},s=`
      datagrid-row
      ${e?"datagrid-row-selected":""}
      ${a?"datagrid-row-hoverable":""}
      ${i}
    `;return d.jsx("div",{className:s,role:"row",ref:l,onClick:r,...n,children:t})});u.displayName="DataGridRow";try{u.displayName="DataGridRow",u.__docgenInfo={description:"",displayName:"DataGridRow",props:{isSelected:{defaultValue:{value:"false"},description:`Indicates if the DataGridRow should be in an active state,
applying styles for persistent selection or activation.`,name:"isSelected",required:!1,type:{name:"boolean"}},onClick:{defaultValue:null,description:"Row click handler",name:"onClick",required:!1,type:{name:"((_event: MouseEvent<HTMLDivElement, MouseEvent>) => void)"}},className:{defaultValue:{value:""},description:"Additional custom CSS class names that can be applied to the DataGridRow.",name:"className",required:!1,type:{name:"string"}},children:{defaultValue:null,description:"Elements or components that will be rendered within the DataGridRow.",name:"children",required:!1,type:{name:"ReactNode"}}}}}catch{}const x=(e,a)=>`
		${e?"jn:whitespace-nowrap":""}
		${a==="center"?`
				jn:justify-center
				jn:flex
				jn:flex-col		
			`:""}
		jn:px-5
		jn:py-3
		jn:border-b
		jn:border-theme-background-lvl-2
		jn:h-full
	`,_=e=>{let a;return e&&(a={gridColumn:`span ${e} / span ${e}`}),a},m=h.forwardRef(({colSpan:e,nowrap:a=!1,className:i="",children:t,...n},l)=>{const s=(v()||{}).cellVerticalAlignment;return d.jsx("div",{className:`juno-datagrid-cell ${x(a,s)} ${i}`,style:_(e),role:"gridcell",ref:l,...n,children:t})});m.displayName="DataGridCell";try{m.displayName="DataGridCell",m.__docgenInfo={description:"",displayName:"DataGridCell",props:{colSpan:{defaultValue:null,description:"Add a col span to the cell. This works like a colspan in a normal html table, so you have to take care not to place too many cells in a row if some of them have a colspan.",name:"colSpan",required:!1,type:{name:"number"}},nowrap:{defaultValue:{value:"false"},description:"Set nowrap to true if the cell content shouldn't wrap (this is achieved by adding white-space: nowrap;)",name:"nowrap",required:!1,type:{name:"boolean"}},children:{defaultValue:null,description:"Children to render in the DataGridCell",name:"children",required:!1,type:{name:"ReactNode"}},className:{defaultValue:{value:""},description:"Add a classname",name:"className",required:!1,type:{name:"string"}}}}}catch{}export{p as D,u as a,m as b};
