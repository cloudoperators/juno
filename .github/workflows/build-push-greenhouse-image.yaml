# Run it locally with act
#  1. Install act: https://github.com/nektos/act/releases
#  2. Create a .secret file in the root of this repository with the following content:
#     `GITHUB_TOKEN=your_github_token` and `ACT=true`
#     Note: to create a token...
#      * Log in to your GitHub account and go to your profile settings.
#      * In the left sidebar, click on "Developer settings".
#      * Select "Personal access tokens" from the menu.
#      * Click on "Generate new token" (classic or fine-grained). and choose `public_repoAccess`
#      * Copy the token and use it in the .secrets file
#  3. Trigger the workflow with act:
#     `act workflow_dispatch --container-architecture linux/amd64 -P default=catthehacker/ubuntu:act-latest -W .github/workflows/build-push-greenhouse-image.yaml`

name: Build Greenhouse Dashboard ðŸ’š

on:
  workflow_dispatch: {}
  push:
    branches:
      - main
    paths:
      - apps/greenhouse/CHANGELOG.md

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: "juno-app-greenhouse"
  PACKAGE_PATH: "apps/greenhouse"
  DESCRIPTION: "This is the shell app for Project Greenhouse. It is the host for all apps that are part of Greenhouse."

jobs:
  build-and-push:
    name: Build and Push Greenhouse Dashboard Image
    runs-on: [default]

    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #v4.2.2

      - name: Read version from package.json
        id: read_version
        working-directory: ${{ env.PACKAGE_PATH }}
        run: |
          # Extract the first version number that appears after "## "
          GREENHOUSE_VERSION=$(jq -r '.version' package.json)
          echo "Greenhouse version is $GREENHOUSE_VERSION"
          echo "IMAGE_VERSION=$GREENHOUSE_VERSION" >> $GITHUB_OUTPUT

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 #v3.4.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # and check if the image with the same version already exists
      - name: Check if image exists ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.read_version.outputs.IMAGE_VERSION }} in registry
        id: check-image
        run: |
          # If the image with this tag already exists, this command will exit with status code 1.
          if docker pull ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.read_version.outputs.IMAGE_VERSION }}; then
            echo "Image ${{ env.IMAGE_NAME }}:${{ steps.read_version.outputs.IMAGE_VERSION }} already exists in the registry"
            exit 1
          fi

      # This action enables you to SIGN and VERIFY container images using cosign
      - name: Install cosign
        uses: sigstore/cosign-installer@398d4b0eeef1380460a10c8013a76f728fb906ac # v3.9.1

      # Set up BuildKit Docker container builder to be able to build MULTI-platform images and export cache
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
        with:
          driver-opts: |
            image=moby/buildkit:latest

      - name: Generate Docker metadata
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 #v5.7.0
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{major}}.{{minor}}.{{patch}},value=${{ steps.read_version.outputs.IMAGE_VERSION }}
            type=sha,enable=true,format=short,prefix=
          labels: |
            org.opencontainers.image.description=${{env.DESCRIPTION}}
            org.opencontainers.image.title=Greenhouse-UI
            org.opencontainers.image.url=https://github.com/cloudoperators/juno/tree/main/apps/greenhouse
            org.opencontainers.image.source=https://github.com/cloudoperators/juno/tree/main/apps/greenhouse
          annotations: |
            manifest:org.opencontainers.image.description=${{env.DESCRIPTION}}
            manifest:org.opencontainers.image.title=Greenhouse-UI
            manifest:org.opencontainers.image.source=https://github.com/cloudoperators/juno/tree/main/apps/greenhouse
            manifest:org.opencontainers.image.url=https://github.com/cloudoperators/juno/tree/main/apps/greenhouse

      # Build and push to Docker
      - name: Build and push Docker image ${{ steps.meta.outputs.tags }}
        id: build-image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: ${{ env.PACKAGE_PATH }}/docker/Dockerfile
          # remove untagged images produced for multi platform builds
          provenance: false

      - name: Sign the published Docker image
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-image.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

  vulnerability-scan:
    permissions:
      contents: read
      packages: read
      security-events: write
    name: Vulnerability Scan
    needs: build-and-push
    runs-on: [default]
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@76071ef0d7ec797419534a183b498b4d6366cf37 # 0.31.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
          ignore-unfixed: true
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH,MEDIUM"

      - name: Trivy vulnerability scanner (table output)
        id: table-trivy
        uses: aquasecurity/trivy-action@76071ef0d7ec797419534a183b498b4d6366cf37 # 0.31.0
        env:
          TRIVY_SKIP_DB_UPDATE: true
          TRIVY_SKIP_JAVA_DB_UPDATE: true
          TRIVY_FORMAT: "table"
          TRIVY_OUTPUT: ""
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: "table"
          ignore-unfixed: true
          severity: "CRITICAL,HIGH,MEDIUM"
          skip-setup-trivy: true

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@181d5eefc20863364f96762470ba6f862bdef56b # v3.29.2
        if: always()
        with:
          sarif_file: trivy-results.sarif

  notify-on-failure:
    if: failure()
    permissions:
      contents: read
    needs: [build-and-push, vulnerability-scan]
    uses: cloudoperators/juno/.github/workflows/shared-slack-notification.yaml@main
    with:
      title: "ðŸš¨ JUNO Greenhouse Image Failed ðŸš¨"
      body: "An error occurred while building the Greenhouse image for the branch ${{ github.head_ref || github.ref_name }}. Please check the logs for more information. <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Check the logs>"
    secrets:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
