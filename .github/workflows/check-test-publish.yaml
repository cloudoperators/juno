# Run it locally with act
#  1. Install act:
#     `brew install act`
#  2. Create a .secret file with the following content:
#     `GITHUB_TOKEN=your_github_token`
# WORKFLOW CALL
# 1.Create a act_workflow_call.json file with the following content:
#     `{"inputs": {"change": {"type": "package", "asset": "juno-ui-components"}, "node": "20.x"}}`
# 2. Run the following command:
#     `act workflow_call --eventpath act_workflow_call.json --container-architecture linux/amd64 -P default=catthehacker/ubuntu:act-latest -j publish-package`

name: Check, Test, and Publish

on:
  workflow_call:
    inputs:
      change:
        required: true
        type: string
      node:
        required: true
        type: string

jobs:
  check-3rd-party-licenses:
    runs-on: [default]
    outputs:
      skip: ${{ steps.remove-self-hosted-registry.outputs.SKIP }}
    steps:
      - name: Extract package name and type save them to env
        id: extract-attributes
        run: |
          echo "====workflow inputs===="
          echo 'Inputs: ${{ toJson(inputs) }}'
          echo "Change: ${{ toJson(inputs.change) }}"
          echo "Node: ${{ toJson(inputs.node) }}"
          echo "===="
          changed_package_type=$( echo '${{ inputs.change }}' | jq -r '.type' )
          changed_package=$( echo '${{ inputs.change }}' | jq -r '.asset' )
          node_version=$(echo '${{ inputs.node }}' | jq -r '.')
          echo "CHANGED_PACKAGE_TYPE=$changed_package_type" >> $GITHUB_ENV
          echo "CHANGED_PACKAGE=$changed_package" >> $GITHUB_ENV
          echo "NODE_VERSION=$node_version" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Remove all dependencies to our self hosted registry (temporary do tue not access from the internet)
        id: remove-self-hosted-registry
        run: |
          echo type: $CHANGED_PACKAGE_TYPE, package: $CHANGED_PACKAGE
          cd "$CHANGED_PACKAGE_TYPE/$CHANGED_PACKAGE"

          cp package.json original-package.json

          jq '(.dependencies // {} | with_entries(select(.value | contains("https://assets.juno.global.cloud.sap") | not))) as $deps |
          (.devDependencies // {} | with_entries(select(.value | contains("https://assets.juno.global.cloud.sap") | not))) as $devDeps |
          (.peerDependencies // {} | with_entries(select(.value | contains("https://assets.juno.global.cloud.sap") | not))) as $peerDeps |
          (if ($deps | length) > 0 then .dependencies = $deps else del(.dependencies) end) |
          (if ($devDeps | length) > 0 then .devDependencies = $devDeps else del(.devDependencies) end) |
          (if ($peerDeps | length) > 0 then .peerDependencies = $peerDeps else del(.peerDependencies) end)' package.json > temp.json && mv temp.json package.json

          if diff original-package.json package.json > /dev/null; then
            echo "=== No dependencies to our self hosted registry found ==="
            echo "SKIP=false" >> $GITHUB_OUTPUT
          else
            echo "=== Dependencies to our self hosted registry found ==="
            echo "SKIP=true" >> $GITHUB_OUTPUT
          fi

      - name: Install npm dependencies and check 3rd party licenses
        run: |
          echo type: $CHANGED_PACKAGE_TYPE, package: $CHANGED_PACKAGE
          cd "$CHANGED_PACKAGE_TYPE/$CHANGED_PACKAGE"
          echo "====package.json===="
          cat package.json
          echo "========"
          npm i
          npm install -g license-checker-rseidelsohn
          license-checker-rseidelsohn -onlyAllow "MIT;ISC;Apache-2.0;BSD-2-Clause;BSD-3-Clause;BSD-4-Clause;CC-BY-3.0;CC-BY-4.0;BlueOak-1.0.0;CC0-1.0;0BSD;Python-2.0;BSD*;Unlicense"

  test-package:
    needs: [check-3rd-party-licenses]
    runs-on: [default]
    if: needs.check-3rd-party-licenses.outputs.skip == 'false'
    outputs:
      skip: ${{ needs.check-3rd-party-licenses.outputs.skip }}
    steps:
      - name: Extract package name and type save them to env
        run: |
          changed_package_type=$( echo '${{ inputs.change }}' | jq -r '.type' )
          changed_package=$( echo '${{ inputs.change }}' | jq -r '.asset' )
          node_version=$(echo '${{ inputs.node }}' | jq -r '.')
          echo "CHANGED_PACKAGE_TYPE=$changed_package_type" >> $GITHUB_ENV
          echo "CHANGED_PACKAGE=$changed_package" >> $GITHUB_ENV
          echo "NODE_VERSION=$node_version" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run tests
        run: |
          echo type: $CHANGED_PACKAGE_TYPE, package: $CHANGED_PACKAGE
          cd "$CHANGED_PACKAGE_TYPE/$CHANGED_PACKAGE"
          npm i
          npm run test

  publish-package:
    needs: [test-package]
    runs-on: [default]
    if: needs.test-package.outputs.skip == 'false'
    steps:
      - name: Extract package name and type save them to env
        run: |
          changed_package_type=$( echo '${{ inputs.change }}' | jq -r '.type' )
          changed_package=$( echo '${{ inputs.change }}' | jq -r '.asset' )
          node_version=$(echo '${{ inputs.node }}' | jq -r '.')
          echo "CHANGED_PACKAGE_TYPE=$changed_package_type" >> $GITHUB_ENV
          echo "CHANGED_PACKAGE=$changed_package" >> $GITHUB_ENV
          echo "NODE_VERSION=$node_version" >> $GITHUB_ENV
      - name: Publish package
        run: |
          echo "==="
          echo "We would now publish!!!!"
          echo "==="
