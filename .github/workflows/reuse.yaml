name: Reuse and 3rd Party License Checker

on:
  pull_request:
    types: [opened, synchronize, reopened]
  # workflow_run:
  #   workflows: ["Check & Fix License Header"]
  #   types:
  #     - completed

jobs:
  reuse-compliance-check:
    runs-on: [default]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # https://github.com/fsfe/reuse-action
      - name: REUSE Compliance Check
        uses: fsfe/reuse-action@v3

  detect-changes:
    needs: reuse-compliance-check
    runs-on: [default]
    outputs:
      changes: ${{ steps.create-changes.outputs.changes}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate app and lib filters
        run: |
          for folder in apps/*; do
            folder_name=$(basename "$folder")
            echo "$folder_name: $folder/**" >> temp_app_filters.yaml
          done
          for folder in libs/*; do
            folder_name=$(basename "$folder")
            echo "$folder_name: $folder/**" >> temp_lib_filters.yaml
          done

      - uses: dorny/paths-filter@v3
        id: filters
        with:
          list-files: shell
          filters: |
            apps: apps/**
            libs: libs/**

      - uses: dorny/paths-filter@v3
        id: app-filters
        with:
          list-files: shell
          filters: temp_app_filters.yaml

      - uses: dorny/paths-filter@v3
        id: lib-filters
        with:
          list-files: shell
          filters: temp_lib_filters.yaml

      - name: Create changes array
        id: create-changes
        run: |
          app_changes=$(echo '${{ steps.app-filters.outputs.changes }}' | jq -c '.[]')
          lib_changes=$(echo '${{ steps.lib-filters.outputs.changes }}' | jq -c '.[]')

          changes=()
          for app in $app_changes; do
            changes+=( "{\"type\":\"apps\",\"asset\":$app}" )
          done
          for change in $lib_changes; do
            changes+=( "{\"type\":\"libs\",\"asset\":$change}" )
          done
          echo "changes=[$(IFS=,; echo "${changes[*]}")]" >> $GITHUB_OUTPUT

      - name: Show outputs
        run: |
          echo "========"
          cat temp_app_filters.yaml
          echo "========"          
          cat temp_lib_filters.yaml
          echo "========"
          echo apps: ${{ steps.filters.outputs.apps}}
          echo apps_files: ${{ steps.filters.outputs.apps_files}}
          echo app changes: ${{ steps.app-filters.outputs.changes}}          
          echo libs: ${{ steps.filters.outputs.libs}}
          echo libs_files: ${{ steps.filters.outputs.libs_files}}
          echo lib changes: ${{ steps.lib-filters.outputs.changes}}
          echo changes: ${{ steps.create-changes.outputs.changes}}
          echo "===================="

  check-3rd-party-licenses:
    needs: detect-changes
    runs-on: [default]
    strategy:
      matrix:
        change: ${{fromJson(needs.detect-changes.outputs.changes)}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      - name: Extract change attributes and save to env
        id: extract-attributes
        run: |
          change_type=$( echo '${{ toJson(matrix.change) }}' | jq -r '.type' )
          change_asset=$( echo '${{ toJson(matrix.change) }}' | jq -r '.asset' )
          echo "change_type=$change_type" >> $GITHUB_ENV
          echo "change_asset=$change_asset" >> $GITHUB_ENV

      - name: Remove all dependencies to our self hosted registry (temporary do tue not access from the internet)
        run: |
          echo type: $change_type, asset: $change_asset
          cd "$change_type/$change_asset"
          jq '(.dependencies // {} | with_entries(select(.value | contains("https://assets.juno.global.cloud.sap") | not))) as $deps |
              (.devDependencies // {} | with_entries(select(.value | contains("https://assets.juno.global.cloud.sap") | not))) as $devDeps |
              (.peerDependencies // {} | with_entries(select(.value | contains("https://assets.juno.global.cloud.sap") | not))) as $peerDeps |
              .dependencies = $deps |
              .devDependencies = $devDeps |
              .peerDependencies = $peerDeps' package.json > temp.json && mv temp.json package.json

      - name: Install npm dependencies and check 3rd party licenses
        run: |
          echo type: $change_type, asset: $change_asset
          cd "$change_type/$change_asset"
          echo "====package.json===="
          cat package.json
          echo "========"
          npm i
          npm install -g license-checker-rseidelsohn
          license-checker-rseidelsohn -onlyAllow "MIT;ISC;Apache-2.0;BSD-2-Clause;BSD-3-Clause;BSD-4-Clause;CC-BY-3.0;CC-BY-4.0;BlueOak-1.0.0;CC0-1.0;0BSD;Python-2.0;BSD*;Unlicense"

  test-assets:
    needs: check-3rd-party-licenses
    runs-on: [default]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
      - name: Run tests
        run: |
          cd "$change_type/$change_asset"
          npm i
          npm run test
