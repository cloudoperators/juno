# Run it locally with act
#  1. Install act:
#     `brew install act`
#  2. Create a .secret file with the following content:
#     `GITHUB_TOKEN=your_github_token`
#  WORKFLOW_DISPATCH
#     `act workflow_dispatch  --container-architecture linux/amd64 -P default=catthehacker/ubuntu:act-latest -W .github/workflows/build-push-supernova-image.yaml`

name: Build Supernova ‚òÄÔ∏è

on:
  workflow_dispatch: {}
  push:
    branches:
      - main
    paths:
      - apps/supernova/CHANGELOG.md

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: "juno-app-supernova"
  PACKAGE_PATH: "apps/supernova"
  DESCRIPTION: "This image contains a standalone runnable version of the Supernova alternative Alertmanager UI. For configuration options see the README here: https://github.com/cloudoperators/juno/tree/main/apps/supernova/docker"

jobs:
  build-and-push:
    name: Build and push Supernova image
    runs-on: [default]
    outputs:
      failed: ${{ steps.set-failure-output.outputs.failed }}
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 #v4.3.0

      - name: Read version from CHANGELOG.md
        id: read_version
        working-directory: ${{ env.PACKAGE_PATH }}
        run: |
          # Extract the first version number that appears after "## "
          LAST_VERSION=$(grep -m 1 -oP '(?<=## )\d+\.\d+\.\d+' CHANGELOG.md)
          echo "Latest version is $LAST_VERSION"
          echo "IMAGE_VERSION=$LAST_VERSION" >> $GITHUB_ENV

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 #v3.5.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull the latest image and set status
        id: check-image
        run: |
          if docker pull ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }}; then
            echo "Image ${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }} already exists in the ${{ env.REGISTRY }} registry. Skipping workflow. Please increment the version."
            exit 1
          fi

      # This action enables you to SIGN and VERIFY container images using cosign
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        uses: sigstore/cosign-installer@d58896d6a1865668819e1d91763c7751a165e159 # v3.9.2

      # Add support for more platforms with QEMU (optional)
      # QEMU is a generic and open source machine & userspace emulator and virtualizer.
      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 #v3.6.0

      # Set up BuildKit Docker container builder to be able to build MULTI-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
        with:
          driver-opts: |
            image=moby/buildkit:latest

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f #v5.8.0
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            # Use the version from the VERSION file
            type=raw,value=${{ env.IMAGE_VERSION }},prefix=
            # Optionally include semver tags
            type=semver,pattern={{major}}.{{minor}},prefix=
            # Additional Useful Tags
            type=raw,value=${{ github.sha }}
            type=sha,enable=true,format=short,prefix=
            type=edge,branch=master
          labels: |
            org.opencontainers.image.title=Supernova UI
            org.opencontainers.image.description=${{env.DESCRIPTION}}
            org.opencontainers.image.url=https://github.com/cloudoperators/juno/tree/main/apps/supernova
            org.opencontainers.image.source=https://github.com/cloudoperators/juno/tree/main/apps/supernova
            org.opencontainers.image.documentation=https://github.com/cloudoperators/juno/tree/main/apps/supernova
          annotations: |
            manifest:org.opencontainers.image.title=Supernova UI
            manifest:org.opencontainers.image.description=${{env.DESCRIPTION}}
            manifest:org.opencontainers.image.url="https://github.com/cloudoperators/juno/tree/main/apps/supernova"
            manifest:org.opencontainers.image.source="https://github.com/cloudoperators/juno/tree/main/apps/supernova"
            manifest:org.opencontainers.image.documentation=https://github.com/cloudoperators/juno/tree/main/apps/supernova

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          file: ${{ env.PACKAGE_PATH }}/docker/Dockerfile
          push: true
          # remove untagged images produced for multi platform builds
          provenance: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: |
            linux/amd64
            linux/arm64

      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

      - name: Set failure output
        id: set-failure-output
        if: failure()
        run: echo "failed=build-and-push" >> $GITHUB_OUTPUT

  vulnerability-scan:
    if: success()
    permissions:
      contents: read
      packages: read
      security-events: write
    name: Vulnerability Scan
    needs: build-and-push
    runs-on: [default]
    outputs:
      failed: ${{ steps.set-failure-output.outputs.failed }}
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@f9424c10c36e288d5fa79bd3dfd1aeb2d6eae808 # 0.33.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          ignore-unfixed: true
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH,MEDIUM"

      - name: Trivy vulnerability scanner (table output)
        id: table-trivy
        uses: aquasecurity/trivy-action@f9424c10c36e288d5fa79bd3dfd1aeb2d6eae808 # 0.33.0
        env:
          TRIVY_SKIP_DB_UPDATE: true
          TRIVY_SKIP_JAVA_DB_UPDATE: true
          TRIVY_FORMAT: "table"
          TRIVY_OUTPUT: ""
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: "table"
          ignore-unfixed: true
          severity: "CRITICAL,HIGH,MEDIUM"
          skip-setup-trivy: true

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@3c3833e0f8c1c83d449a7478aa59c036a9165498 # v3.29.11
        if: always()
        with:
          sarif_file: trivy-results.sarif

      - name: Set failure output
        id: set-failure-output
        if: failure()
        run: echo "failed=vulnerability-scan" >> $GITHUB_OUTPUT

  notify-on-failure:
    if: failure()
    permissions:
      contents: read
    needs: [build-and-push, vulnerability-scan]
    uses: cloudoperators/juno/.github/workflows/shared-slack-notification.yaml@main
    with:
      title: "üö® JUNO Supernova Image Failed üö®"
      body: |
        An error occurred while building the Supernova image for the branch `${{ github.head_ref || github.ref_name }}`.

        ‚ùå Failing jobs:
        - ${{ needs.build-and-push.outputs.failed }}
        - ${{ needs.vulnerability-scan.outputs.failed }}

        <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Check the logs>
    secrets:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
